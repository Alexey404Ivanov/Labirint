class Map {
    field int width, height;
    field Array map;
    field int memAddress;
    field int stepCounter;
   
    constructor Map new() {
        let width = 32;
        let height = 14;
        let map = Array.new(width * height);
        do readMap();
        do drawMap();
        return this;
    }

    method int getWidth() {
        return width;
    }
    
    method int getHeight() {
        return height;
    }

    method Array getMap() {
        return map;
    }

    method void setMap(int index, int value) {
        let map[index] = value;
        return;
    }

    method void drawMap() {
        var int i, j;
        var int temp;
        let i = 0;
        let stepCounter = stepCounter + 1;
        while (i < height) {
            let j = 0;
            while (j < width) {
                let temp = map[i * width + j];
                if (temp = 0) {
                    do clearCell(i * 512 + j + 1024);
                }
                if (temp = 1) {
                    do drawWall(i * 512 + j + 1024);
                }
                if (temp = 2) {
                    do drawPlayer(i * 512 + j + 1024);
                }
                if (temp = 3) {
                    do drawFinish(i * 512 + j + 1024);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        do showStepCounter(stepCounter);
        return;
    }

    method void readMap() {
        let map[0] = 1; let map[1] = 1; let map[2] = 1; let map[3] = 1; let map[4] = 1; let map[5] = 1; let map[6] = 1; let map[7] = 1; let map[8] = 1; let map[9] = 1; 
        let map[10] = 1; let map[11] = 1; let map[12] = 3; let map[13] = 1; let map[14] = 1; let map[15] = 1; let map[16] = 1; let map[17] = 1; let map[18] = 1; let map[19] = 1; 
        let map[20] = 1; let map[21] = 1; let map[22] = 1; let map[23] = 1; let map[24] = 1; let map[25] = 1; let map[26] = 1; let map[27] = 1; let map[28] = 1; let map[29] = 1; 
        let map[30] = 1; let map[31] = 1; let map[32] = 1; let map[33] = 2; let map[34] = 0; let map[35] = 0; let map[36] = 0; let map[37] = 0; let map[38] = 0; let map[39] = 0; 
        let map[40] = 0; let map[41] = 0; let map[42] = 1; let map[43] = 0; let map[44] = 0; let map[45] = 1; let map[46] = 0; let map[47] = 0; let map[48] = 0; let map[49] = 0; 
        let map[50] = 0; let map[51] = 0; let map[52] = 0; let map[53] = 0; let map[54] = 0; let map[55] = 0; let map[56] = 0; let map[57] = 0; let map[58] = 0; let map[59] = 0; 
        let map[60] = 0; let map[61] = 0; let map[62] = 0; let map[63] = 1; let map[64] = 1; let map[65] = 1; let map[66] = 0; let map[67] = 1; let map[68] = 1; let map[69] = 1; 
        let map[70] = 0; let map[71] = 1; let map[72] = 1; let map[73] = 0; let map[74] = 1; let map[75] = 1; let map[76] = 0; let map[77] = 0; let map[78] = 0; let map[79] = 1; 
        let map[80] = 1; let map[81] = 1; let map[82] = 1; let map[83] = 1; let map[84] = 1; let map[85] = 0; let map[86] = 0; let map[87] = 1; let map[88] = 1; let map[89] = 1; 
        let map[90] = 0; let map[91] = 1; let map[92] = 0; let map[93] = 1; let map[94] = 0; let map[95] = 1; let map[96] = 1; let map[97] = 0; let map[98] = 0; let map[99] = 0; 
        let map[100] = 0; let map[101] = 1; let map[102] = 0; let map[103] = 1; let map[104] = 0; let map[105] = 0; let map[106] = 1; let map[107] = 0; let map[108] = 0; let map[109] = 0; 
        let map[110] = 1; let map[111] = 1; let map[112] = 0; let map[113] = 0; let map[114] = 0; let map[115] = 1; let map[116] = 1; let map[117] = 1; let map[118] = 0; let map[119] = 0; 
        let map[120] = 0; let map[121] = 1; let map[122] = 0; let map[123] = 1; let map[124] = 0; let map[125] = 1; let map[126] = 0; let map[127] = 1; let map[128] = 1; let map[129] = 0; 
        let map[130] = 1; let map[131] = 1; let map[132] = 0; let map[133] = 1; let map[134] = 0; let map[135] = 1; let map[136] = 0; let map[137] = 1; let map[138] = 1; let map[139] = 1; 
        let map[140] = 1; let map[141] = 1; let map[142] = 1; let map[143] = 0; let map[144] = 1; let map[145] = 1; let map[146] = 0; let map[147] = 0; let map[148] = 0; let map[149] = 1; 
        let map[150] = 1; let map[151] = 1; let map[152] = 0; let map[153] = 1; let map[154] = 0; let map[155] = 0; let map[156] = 0; let map[157] = 1; let map[158] = 0; let map[159] = 1; 
        let map[160] = 1; let map[161] = 0; let map[162] = 1; let map[163] = 0; let map[164] = 0; let map[165] = 1; let map[166] = 0; let map[167] = 0; let map[168] = 0; let map[169] = 1; 
        let map[170] = 0; let map[171] = 0; let map[172] = 0; let map[173] = 0; let map[174] = 0; let map[175] = 0; let map[176] = 1; let map[177] = 0; let map[178] = 0; let map[179] = 1; 
        let map[180] = 1; let map[181] = 1; let map[182] = 0; let map[183] = 0; let map[184] = 0; let map[185] = 1; let map[186] = 1; let map[187] = 1; let map[188] = 1; let map[189] = 1; 
        let map[190] = 0; let map[191] = 1; let map[192] = 1; let map[193] = 0; let map[194] = 1; let map[195] = 0; let map[196] = 1; let map[197] = 1; let map[198] = 1; let map[199] = 1; 
        let map[200] = 0; let map[201] = 1; let map[202] = 0; let map[203] = 1; let map[204] = 1; let map[205] = 1; let map[206] = 1; let map[207] = 0; let map[208] = 1; let map[209] = 0; 
        let map[210] = 1; let map[211] = 1; let map[212] = 0; let map[213] = 0; let map[214] = 0; let map[215] = 1; let map[216] = 1; let map[217] = 0; let map[218] = 0; let map[219] = 0; 
        let map[220] = 0; let map[221] = 0; let map[222] = 0; let map[223] = 1; let map[224] = 1; let map[225] = 0; let map[226] = 1; let map[227] = 0; let map[228] = 0; let map[229] = 0; 
        let map[230] = 0; let map[231] = 0; let map[232] = 0; let map[233] = 1; let map[234] = 0; let map[235] = 0; let map[236] = 0; let map[237] = 0; let map[238] = 0; let map[239] = 0; 
        let map[240] = 0; let map[241] = 0; let map[242] = 0; let map[243] = 0; let map[244] = 0; let map[245] = 1; let map[246] = 0; let map[247] = 0; let map[248] = 0; let map[249] = 0; 
        let map[250] = 1; let map[251] = 0; let map[252] = 1; let map[253] = 1; let map[254] = 0; let map[255] = 1; let map[256] = 1; let map[257] = 0; let map[258] = 1; let map[259] = 0; 
        let map[260] = 1; let map[261] = 1; let map[262] = 0; let map[263] = 1; let map[264] = 1; let map[265] = 1; let map[266] = 0; let map[267] = 1; let map[268] = 1; let map[269] = 1; 
        let map[270] = 0; let map[271] = 1; let map[272] = 1; let map[273] = 0; let map[274] = 1; let map[275] = 1; let map[276] = 0; let map[277] = 0; let map[278] = 1; let map[279] = 0; 
        let map[280] = 1; let map[281] = 0; let map[282] = 1; let map[283] = 0; let map[284] = 1; let map[285] = 0; let map[286] = 0; let map[287] = 1; let map[288] = 1; let map[289] = 0; 
        let map[290] = 0; let map[291] = 0; let map[292] = 0; let map[293] = 0; let map[294] = 0; let map[295] = 0; let map[296] = 0; let map[297] = 1; let map[298] = 0; let map[299] = 0; 
        let map[300] = 0; let map[301] = 1; let map[302] = 0; let map[303] = 0; let map[304] = 1; let map[305] = 0; let map[306] = 0; let map[307] = 1; let map[308] = 0; let map[309] = 1; 
        let map[310] = 0; let map[311] = 0; let map[312] = 0; let map[313] = 1; let map[314] = 1; let map[315] = 0; let map[316] = 1; let map[317] = 0; let map[318] = 1; let map[319] = 1; 
        let map[320] = 1; let map[321] = 1; let map[322] = 1; let map[323] = 0; let map[324] = 1; let map[325] = 0; let map[326] = 1; let map[327] = 0; let map[328] = 0; let map[329] = 1; 
        let map[330] = 1; let map[331] = 1; let map[332] = 0; let map[333] = 1; let map[334] = 0; let map[335] = 1; let map[336] = 1; let map[337] = 1; let map[338] = 0; let map[339] = 0; 
        let map[340] = 0; let map[341] = 1; let map[342] = 0; let map[343] = 1; let map[344] = 0; let map[345] = 0; let map[346] = 1; let map[347] = 0; let map[348] = 1; let map[349] = 0; 
        let map[350] = 0; let map[351] = 1; let map[352] = 1; let map[353] = 0; let map[354] = 0; let map[355] = 0; let map[356] = 1; let map[357] = 0; let map[358] = 1; let map[359] = 0; 
        let map[360] = 1; let map[361] = 1; let map[362] = 0; let map[363] = 0; let map[364] = 0; let map[365] = 1; let map[366] = 0; let map[367] = 0; let map[368] = 0; let map[369] = 1; 
        let map[370] = 0; let map[371] = 0; let map[372] = 0; let map[373] = 1; let map[374] = 0; let map[375] = 0; let map[376] = 0; let map[377] = 0; let map[378] = 0; let map[379] = 0; 
        let map[380] = 1; let map[381] = 1; let map[382] = 0; let map[383] = 1; let map[384] = 1; let map[385] = 0; let map[386] = 1; let map[387] = 0; let map[388] = 0; let map[389] = 0; 
        let map[390] = 0; let map[391] = 0; let map[392] = 0; let map[393] = 0; let map[394] = 0; let map[395] = 1; let map[396] = 0; let map[397] = 0; let map[398] = 0; let map[399] = 1; 
        let map[400] = 0; let map[401] = 0; let map[402] = 0; let map[403] = 1; let map[404] = 0; let map[405] = 0; let map[406] = 1; let map[407] = 0; let map[408] = 0; let map[409] = 1; 
        let map[410] = 0; let map[411] = 0; let map[412] = 0; let map[413] = 0; let map[414] = 0; let map[415] = 1; let map[416] = 1; let map[417] = 1; let map[418] = 1; let map[419] = 1; 
        let map[420] = 1; let map[421] = 1; let map[422] = 1; let map[423] = 1; let map[424] = 1; let map[425] = 1; let map[426] = 1; let map[427] = 1; let map[428] = 1; let map[429] = 1; 
        let map[430] = 1; let map[431] = 1; let map[432] = 1; let map[433] = 1; let map[434] = 1; let map[435] = 1; let map[436] = 1; let map[437] = 1; let map[438] = 1; let map[439] = 1; 
        let map[440] = 1; let map[441] = 1; let map[442] = 1; let map[443] = 1; let map[444] = 1; let map[445] = 1; let map[446] = 1; let map[447] = 1; 
        return;
    }

    method void drawWall(int location) {
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, 4228);
		do Memory.poke(memAddress + 32, 4228);
		do Memory.poke(memAddress + 64, 4228);
		do Memory.poke(memAddress + 96, -1);
		do Memory.poke(memAddress + 128, 17442);
		do Memory.poke(memAddress + 160, 17442);
		do Memory.poke(memAddress + 192, 17442);
		do Memory.poke(memAddress + 224, -1);
		do Memory.poke(memAddress + 256, 4228);
		do Memory.poke(memAddress + 288, 4228);
		do Memory.poke(memAddress + 320, 4228);
		do Memory.poke(memAddress + 352, -1);
		do Memory.poke(memAddress + 384, 17442);
		do Memory.poke(memAddress + 416, 17442);
		do Memory.poke(memAddress + 448, 17442);
		do Memory.poke(memAddress + 480, -1);
		return;
	}

    method void drawPlayer(int location) {
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, 0);
		do Memory.poke(memAddress + 32, 0);
		do Memory.poke(memAddress + 64, 0);
		do Memory.poke(memAddress + 96, 6144);
		do Memory.poke(memAddress + 128, 9600);
		do Memory.poke(memAddress + 160, 9792);
		do Memory.poke(memAddress + 192, 7746);
		do Memory.poke(memAddress + 224, 9201);
		do Memory.poke(memAddress + 256, -13943);
		do Memory.poke(memAddress + 288, -16378);
		do Memory.poke(memAddress + 320, 15364);
		do Memory.poke(memAddress + 352, 1016);
		do Memory.poke(memAddress + 384, 680);
		do Memory.poke(memAddress + 416, 0);
		do Memory.poke(memAddress + 448, 0);
		do Memory.poke(memAddress + 480, 0);
		return;
	}

    method void drawFinish(int location) {
		let memAddress = 16384 + location;
		do Memory.poke(memAddress + 0, 0);
		do Memory.poke(memAddress + 32, 0);
		do Memory.poke(memAddress + 64, 0);
		do Memory.poke(memAddress + 96, 3584);
		do Memory.poke(memAddress + 128, 4480);
		do Memory.poke(memAddress + 160, 9312);
		do Memory.poke(memAddress + 192, 16408);
		do Memory.poke(memAddress + 224, 31214);
		do Memory.poke(memAddress + 256, 17986);
		do Memory.poke(memAddress + 288, 24580);
		do Memory.poke(memAddress + 320, 18530);
		do Memory.poke(memAddress + 352, 30622);
		do Memory.poke(memAddress + 384, 0);
		do Memory.poke(memAddress + 416, 0);
		do Memory.poke(memAddress + 448, 0);
		do Memory.poke(memAddress + 480, 0);
		return;
	}

    method void clearCell (int location) {
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    method void dispose() {
        do map.dispose();
		do Memory.deAlloc(this);
        return;
	}

    method void showCredits() {
		do Output.moveCursor(1,28);
		do Output.printString("LABIRINT");
		do Output.moveCursor(2,0);
		do Output.printString("----------------------------------------------------------------");
		return;
	}

    method void showStepCounter(int counter) {
        do Output.moveCursor(1, 53);
        do Output.printString("Score: ");
        do Output.printInt(counter);
        return;
    }
}